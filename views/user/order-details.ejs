<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@9/swiper-bundle.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-KK94CHFLLe+nY2dmCWGMq91rCGa5gtU4mk92HdvYe+M/SXH301p5ILy+dN9+nJOZ" crossorigin="anonymous">
    <link rel="stylesheet" type="text/css" href="/style/user/home/vendor.css">
    <link rel="stylesheet" type="text/css" href="/style/user/home.css">

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link
        href="https://fonts.googleapis.com/css2?family=Nunito:wght@400;700&family=Open+Sans:ital,wght@0,400;0,700;1,400;1,700&display=swap"
        rel="stylesheet">
</head>
<body>
    <style>
* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    font-family: Arial, sans-serif;
}

.order-container {
    width: 90%;
    max-width: 1000px;
    margin: 20px auto;
}

.order-list table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
}

.order-list th, .order-list td {
    padding: 12px;
    text-align: left;
    border-bottom: 1px solid #ddd;
}

.order-list th {
    color: #666;
}

.order-list img {
    width: 40px; /* Adjust as needed */
    height: auto;
    object-fit: cover;
}

.status {
    padding: 5px 10px;
    border-radius: 5px;
    font-size: 0.9em;
    font-weight: bold;
}

.in-progress {
    background-color: #5bc0de;
    color: white;
}

.delivered {
    background-color: #5cb85c;
    color: white;
}

.order-summary {
    background-color: #f9f9f9;
    padding: 20px;
    border: 1px solid #ddd;
    margin-bottom: 20px;
}

.order-summary h3 {
    margin-bottom: 10px;
}

.order-summary p {
    margin: 8px 0;
}

.order-summary hr {
    margin: 15px 0;
}

.additional-info {
    display: flex;
    justify-content: space-between;
    margin-top: 20px;
}

.address, .help {
    width: 48%;
}

.address h4, .help h4 {
    margin-bottom: 10px;
}

.help a {
    color: #f56;
    text-decoration: none;
}

.help a:hover {
    text-decoration: underline;
}

.status {
    padding: 5px 10px;
    border-radius: 5px;
    font-size: 0.9em;
    font-weight: bold;
}

.pending {
    background-color: #f0ad4e; 
    color: white;
}

.shipped {
    background-color: #5bc0de;
    color: white;
}

.delivered {
    background-color: #5cb85c; 
    color: white;
}

.cancelled {
    background-color: #d9534f; 
    color: white;
}
.Returned {
    background-color: chocolate;
    color: white;
}
.cancel-btn ,.return-btn{
    color: rgb(255, 0, 0);
    text-decoration: none;
    cursor: pointer;
}
.cancel-btn:hover,
.return-btn:hover{
    color: rgb(255, 255, 255);
    background-color: red;
}


.retry-button{
    background-color: red;
    border: solid #f10808;
    border-radius: 15%;
    padding: 5px;
    color: white;
}

.download-button {
    background-color: #4caf50; 
    color: white;
    font-size: 16px;
    font-weight: bold;
    padding: 12px 20px;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.2s ease;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.download-button:hover {
    background-color: #45a049; 
    transform: scale(1.05);
    box-shadow: 0 6px 10px rgba(0, 0, 0, 0.15);
}

.download-button:active {
    background-color: #3e8e41; 
    transform: scale(0.98);
}


.pagination {
    display: flex;
    justify-content: center;
    margin: 20px 0;
}

.pagination a {
    margin: 0 5px;
    padding: 8px 12px;
    text-decoration: none;
    color: #007bff;
    border: 1px solid #ddd;
    border-radius: 4px;
    transition: background-color 0.3s ease;
}

.pagination a.active {
    background-color: #007bff;
    color: #fff;
    border-color: #007bff;
}

.pagination a:hover {
    background-color: #0056b3;
    color: #fff;
}


    </style>



    <header> <%- include('partial/head') %></header>

    
    <section class="main-sec">
        <div class="order-container">
            <!-- Order List Section -->
            <div class="order-list">
                <table>
                    <thead>
                        <tr>
                            <th>Product Name</th>
                            <th>Order Date</th>
                            <th>Status</th>
                            <th>Price</th>
                            <th>Total Price</th>
                            <th></th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        <% paginatedProducts.forEach(product => { %>
                        <tr>
                            <td style="width: 200px;""><%= product.productName %></td>
                            <td><%= new Date(order.orderDate).toLocaleDateString() %></td>
                            <td>
                                <span class="status 
                                <%= 
                                    product.status === 'Pending' ? 'pending' : 
                                    product.status  === 'Shipped' ? 'shipped' : 
                                    product.status  === 'Delivered' ? 'delivered' : 
                                    product.status === 'Returned' ? 'Returned' :
                                    product.status  === 'Cancelled' ? 'cancelled' : ''
                                %>">
                                <%= product.status.charAt(0).toUpperCase() + product.status.slice(1) %>
                            </span>     
                            </td>
                            <td>₹<%= product.price.toFixed(2) %> <span style="color: #b5aeae; font-size: 10px;">X</span> <%= product.quantity %></td>
                            <td><%= product.total.toFixed(2) %></td>
                            <td><img src="<%= product.image %>" alt="Product Image"></td>
                            <% if(order.PaymentStatus === 'Failed') { %>
                                <td style="color: #d9534f;">payment failed</td>
                            <% } else { %>
                                <% if(product.status != 'Cancelled' && product.status != 'Delivered' && product.status != 'Returned') { %>
                                    <td><a class="cancel-btn" data-product-id="<%= product.productId %>"  data-order-id="<%= order._id %>">Cancel</a></td>
                                <% } else { %>
                                    <% if(product.status === 'Cancelled') { %>
                                        <td style="color: rgb(214, 87, 87);"> cancelled</td>
                                    <% } else { %>
                                        <% if (product.requst.approve === false){ %>
                                            <td style="color: #ff9191;">Return requested</td>
                                        <% } else if(product.requst.approve === true) { %>
                                            <td style="color: #ff9191;">Returned</td>
                                        <% } else { %>
                                            <td><a class="return-btn" data-product-id="<%= product.productId %>" data-order-id="<%= order._id %>">Return</a></td>
                                        <% } %>
                                    <% } %> 
                                <% } %>
                            <% } %> 
                          </tr>
                        <% }) %>
                    </tbody>
                </table>
            </div>

            <div class="pagination">
                <% if (pagination.hasPrevPage) { %>
                    <a href="?page=<%= pagination.currentPage - 1 %>&limit=5" class="prev">Previous</a>
                <% } %>
                <% for (let i = 1; i <= pagination.totalPages; i++) { %>
                    <a href="?page=<%= i %>&limit=5" class="<%= pagination.currentPage === i ? 'active' : '' %>">
                        <%= i %>
                    </a>
                <% } %>
                <% if (pagination.hasNextPage) { %>
                    <a href="?page=<%= pagination.currentPage + 1 %>&limit=5" class="next">Next</a>
                <% } %>
            </div>


    
            <div class="order-summary">
                <h3>Order Summary</h3>

                <p>Subtotal : ₹<%= subTotal.toFixed(2) %></p>
                <p>Discount: -₹<%= order.coupenApplied.discount ? order.coupenApplied.discount.toFixed(2) : 0 %></p>
                <p> 
                    <% if (order.Totalprice < 500) { %>
                        <p>Delivery: ₹60</p>
                    <% } else { %>
                        <p>Delivery: Free</p>
                    <% } %>
                </p> 
                <hr>
                
                <p>Estimated total: <strong id="total-price">₹<%= estimatedTotal.toFixed(2) %></strong></p>
                <p>Payment Method: <strong> <%= order.paymentMethourd === 'cod' ? 'Cash On Delivery' : order.paymentMethourd %></strong></p>
                
                <% if(isDeliverd) { %>
                    <button class="download-button" onclick="downloadInvoice('<%= order._id %>')">Download Invoice</button>
                <% } %>
                
                <% if(order.PaymentStatus === 'Failed'){ %>
                    <button class="retry-button" onclick="retryPayment('<%= order._id %>')">Retry Payment</button>
                <% } %>
                <% if(isCancelled) { %>
                    <p style="color: red;">All products in this order have been canceled.</p>
                <% } %>
            </div>
    
            <div class="additional-info">
                
                    <div class="address">
                        <h4>Shipping Address</h4>
                        <p><strong>Name:</strong> <%= user.userName %></p>
                        <p><strong>Email:</strong> <%= user.email %></p>
                        <p><strong>Phone:</strong> <%= order.address.phonNumber %></p>
                        <p><strong>Address:</strong> <%= order.address.landMark %>, <%= order.address.city %>, <%= order.address.state %>, <%= order.address.postalCode %></p>
                    </div>
            </div>
        </div>
    </section>
    

    <footer style="margin-top: 0px"><%- include('partial/footer') %></footer>


    <script src="/script/user/home.js/jquery-1.11.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/swiper@9/swiper-bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-ENjdO4Dr2bkBIFxQpeoTz1HIcje39Wm4jDKdf19U8gI4ddQ3GYNS7NTKfAdVQSZe"
        crossorigin="anonymous"></script>
    <script src="/script/user/home.js/plugins.js"></script>
    <script src="/script/user/home.js/script.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>






    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    
    <!-- razorpay -->
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
   document.querySelectorAll('.cancel-btn').forEach(function(button) {
        button.addEventListener('click', function(event) {
            event.preventDefault(); 

            const productId = this.getAttribute('data-product-id'); 
            const orderId = this.getAttribute('data-order-id'); 

            Swal.fire({
                title: 'Are you sure?',
                text: "Do you want to cancel this order?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, cancel it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    axios.post('/cancel-order', { productId, orderId })
                        .then(response => {
                            if(response.data.success){
                                Swal.fire(
                                    'Cancelled!',
                                    'Your order has been cancelled.',
                                    'success'
                                ).then(() => {
                                    window.location.reload();
                                });
                            }
                        })
                        .catch(error => {
                            Swal.fire(
                                'Error!',
                                 error.response.data.message || 'Failed to cancel the order. Please try again later.',
                                'error'
                            );
                        });
                }
            })
            .catch(error => {
                console.log(error);
                
            })
        });
    });



    document.querySelectorAll('.return-btn').forEach((btn) => {        
        btn.addEventListener('click',(event) => {
            event.preventDefault()


            const productId = event.currentTarget.getAttribute('data-product-id'); 
            const orderId = event.currentTarget.getAttribute('data-order-id'); 

            Swal.fire({
                title: 'Select a Reason',
                html: `
                    <select id="reason" class="swal2-input">
                        <option value="" disabled selected>Select a reason</option>
                        <option value="damaged">Damaged product</option>
                        <option value="wrong">Wrong product delivered</option>
                        <option value="mind">Changed my mind</option>
                    </select>
                    <div id="explain-reson"></div>
                `,
                focusConfirm: false,
                preConfirm: () => {
                    const selectedReason = document.getElementById('reason').value
                    const additionalInputField = document.getElementById('explain-reson1')
                    const additionalInput = additionalInputField ? additionalInputField.value.trim() : '';

                    
                    if (!selectedReason) {
                        Swal.showValidationMessage('Please select a reason.');
                        return false
                    }else if(!additionalInput){
                        Swal.showValidationMessage('provide additional details.');
                        return false
                    }
                    return { reason: selectedReason, additionalInfo: additionalInput };
                },
                showCancelButton: true,
                confirmButtonText: 'Submit',
                didOpen: () => {
                    const reasonSelect = document.getElementById('reason');
                    const container = document.getElementById('explain-reson');

                    reasonSelect.addEventListener('change', () => {
                        container.innerHTML = '';

                        const inputField = document.createElement('input');
                        inputField.type = 'text';
                        inputField.id = 'explain-reson1';
                        inputField.className = 'swal2-input';
                        inputField.placeholder = 'Provide additional details (if any)';
                        container.appendChild(inputField);
                    });
                }
            }).then((response) => {
                if(response.isConfirmed){
                    const reason = response.value.reason
                    const additionalInfo = response.value.additionalInfo

                    axios.post('/return-order',{reason, additionalInfo, productId, orderId})
                    .then(() => {
                        location.reload()
                    })
                }
            })
            
        })
    })

    // for retry payment 
   async function retryPayment(orderId){
    try {
            const totalPrice = parseFloat(document.getElementById('total-price').textContent.replace(/[^0-9.-]/g, ''))
            console.log(totalPrice);
            
            const response = await axios.post('/create-razourpay-order', { amount: Math.ceil(Number(totalPrice) * 100)});
            const order = response.data;
        
            const options = {
            key: "rzp_test_pp5Ul8PxlHsCpL",
            amount: order.amount,
            currency: "INR",
            name: "Your Shop",
            description: "Purchase Description",
            order_id: order.id,
            handler: async (response) => {
                try {
                const verifyResponse = await axios.post('/verify-payment', response)
                    .then(res => {
                        console.log('yes');
                        
                        if(res.data.success){
                           axios.post('/retry-payment',{orderId})
                            
                            .then(res => {
                                if(res.data.success){
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Success!',
                                        text: 'payment completed successfully.',
                                        confirmButtonText: 'okey!',
                                        timer: 3000,
                                        timerProgressBar: true,
                                    })
                                    .then(res => {
                                        location.reload()
                                    })
                                }
                            })
                            

                            

                        }
                    })
                } catch (error) {
                   
                    
                console.error('Payment verification failed:', error);
                alert('Payment verification failed.');
                }
            }
            };

            const rzp = new Razorpay(options);

            rzp.on('payment.failed', function (response) {
                Swal.fire({
                    icon: 'error',
                    title: 'Payment Failed',
                    text: 'Your payment failed. Please try again.',
                })
            });
    


            rzp.open();


        } catch (error) {
            console.error('Error creating Razorpay order:', error);
            Swal.fire('Error', 'Failed to initiate Razorpay payment.', 'error');
        }
    
   }


//    incvoice dowload
function downloadInvoice(orderId){
    axios.post('/invoice-dowload', { orderId }, { responseType: 'arraybuffer' })
    .then(response => {
        const url = window.URL.createObjectURL(new Blob([response.data]));
        const link = document.createElement('a');
        link.href = url;
        link.setAttribute('download', 'invoice.pdf');
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        window.URL.revokeObjectURL(url);
    })
    .catch(error => {
        console.error('Error downloading invoice:', error);
    });
}
</script>

</body> 
</html>